{
  "Uuid": "6df478ca-30a1-417e-b2ce-132a756d15a3",
  "IsCustomNode": false,
  "Description": "",
  "Name": "Schedule to DataFrame_toSQL_v1",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nimport sys\r\nimport re\r\nimport System\r\nreDir = System.IO.DirectoryInfo(re.__file__)\r\npath_py3_lib = reDir.Parent.Parent.FullName\r\nsys.path.append(path_py3_lib + r'\\Lib\\site-packages')\r\n# pip install mysqlclient\r\n# pip install pymysql\r\n# pip install sqlalchemy\r\n# pip install mysql-connector-python\r\nimport sqlalchemy as db\r\nimport mysql\r\n\r\nWrapDFrame = IN[0] # import class          \r\n\r\nviewschAllLvl = UnwrapElement(IN[1])\r\nexecute = IN[2]\r\nif execute: \r\n    #\r\n    # Set database credentials.\r\n    creds = {'usr': 'root',\r\n             'pwd': '',\r\n             'hst': 'localhost',\r\n             'prt': 3306,\r\n             'dbn': 'powerbalance'}\r\n    # MySQL conection string.\r\n    connstr = 'mysql+mysqlconnector://{usr}:{pwd}@{hst}:{prt}/{dbn}'\r\n    # Create sqlalchemy engine for MySQL connection.\r\n    engine = db.create_engine(connstr.format(**creds))\r\n    # create DataFrame 1\r\n    objdfA = WrapDFrame(viewschAllLvl)\r\n    # remove nan values\r\n    dfC = objdfA.UnwrapDFrame.dropna()\r\n    # export to sql\r\n    dfC.to_sql(name='datasql', con=engine, if_exists = 'replace', index=False)\r\n    OUT = engine\r\n",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "10e706ab572f4433a47a4518e6392d81",
      "Inputs": [
        {
          "Id": "47975528a696432bbc69c5d4536c840f",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "84761a7e15724a82b9f0a43b3ff42fb4",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d42c7ee137f44648b9153768eb9e48cc",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d8c2f6b48adb421c9f1ff99a47912e90",
          "Name": "OUT",
          "Description": "Résultat du script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Exécute un script Python intégré."
    },
    {
      "ConcreteType": "DSRevitNodesUI.Views, DSRevitNodesUI",
      "SelectedIndex": 144,
      "SelectedString": "Puiss. Eclairage Surfacique ALL",
      "NodeType": "ExtensionNode",
      "Id": "18c64afe6c784dbd93b52836ea555d37",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "565da20fe2d54687a5a234ff9c504925",
          "Name": "Views",
          "Description": "Views sélectionné",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Toutes les vues disponibles dans le document actif."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nimport sys\r\nimport re\r\nimport System\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nimport Autodesk.DesignScript.Geometry as DS\r\n\r\n#import Revit API\r\nclr.AddReference('RevitAPI')\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\nimport Autodesk.Revit.DB as DB\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\nmy_path = System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)\r\n\r\nreDir = System.IO.DirectoryInfo(re.__file__)\r\npath_py3_lib = reDir.Parent.Parent.FullName\r\nsys.path.append(path_py3_lib + r'\\Lib\\site-packages')\r\nimport pandas as pd\r\nimport numpy as np\r\nfrom typing import Union\r\nimport webbrowser\r\nimport codecs\r\nfrom bs4 import BeautifulSoup as bs\r\n\r\nclass WrapDFrame():\r\n    dictUnitValue = {}\r\n    def __init__(self, data: Union[DB.ViewSchedule , pd.DataFrame]):\r\n        self.lstError = []\r\n        if isinstance(data, pd.DataFrame):\r\n            self._df = data\r\n        elif isinstance(data, pd.Series):\r\n            self._df = data.to_frame()\r\n        else:\r\n            self._df = self.__getDF_From_View(data)\r\n    #\r\n    def __getDF_From_View(self, data):     \r\n        \"\"\"\r\n        convert Schedule to DataFrame (private method)\r\n        \"\"\"        \r\n        viewschedule = data\r\n        outvalue = []   \r\n        if viewschedule.ViewType == ViewType.PanelSchedule:\r\n            tabledata = viewschedule.GetSectionData(SectionType.Body)\r\n        else:\r\n            tabledata = viewschedule.GetTableData().GetSectionData(SectionType.Body) \r\n        #            \r\n        paraSchNames = []\r\n        nbrCol = tabledata.NumberOfColumns\r\n        nbrRow = tabledata.NumberOfRows \r\n        for r in range(nbrRow):\r\n            if r == 0:\r\n                for c in range(nbrCol):\r\n                    paraSchNames.append(viewschedule.GetCellText(SectionType.Body, r, c))\r\n            else:\r\n                temp = []\r\n                unit_header = []\r\n                #get values by Rows\r\n                for c in range(nbrCol): \r\n                    unitType = tabledata.GetCellSpec(r,c)\r\n                    is_unitType = True if len(unitType.TypeId) > 0 else False\r\n                    #\r\n                    if tabledata.GetCellType(r,c) == CellType.Text or tabledata.GetCellType(r,c) == CellType.ParameterText:\r\n                        valueCell = tabledata.GetCellText(r,c)\r\n                        valueCell, unitstr = self.__to_Float(valueCell) if is_unitType else (valueCell, \"\")\r\n                        temp.append(valueCell)\r\n                        unit_header.append(unitstr)\r\n                    #\r\n                    elif tabledata.GetCellType(r,c) == CellType.Parameter:  \r\n                        try:\r\n                            valueCell = viewschedule.GetParamValue(SectionType.Body, r , c )\r\n                            valueCell, unitstr = self.__to_Float(valueCell) if is_unitType else (valueCell, \"\")\r\n                            temp.append(valueCell)\r\n                            unit_header.append(unitstr)\r\n                        except:\r\n                            valueCell = viewschedule.GetCellText(SectionType.Body, r , c )\r\n                            valueCell, unitstr  = self.__to_Float(valueCell) if is_unitType else (valueCell, \"\")\r\n                            temp.append(valueCell)  \r\n                            unit_header.append(unitstr)                            \r\n                    #      \r\n                    elif tabledata.GetCellType(r,c) == CellType.CalculatedValue:\r\n                        valueCell = tabledata.GetCellCalculatedValue(r,c)\r\n                        valueCell, unitstr  = self.__to_Float(valueCell) if is_unitType else (valueCell, \"\")\r\n                        temp.append(valueCell) \r\n                        unit_header.append(unitstr)\r\n                if len(temp) >= 1:  \r\n                    # replace empty value by NaN\r\n                    temp = [x if x != \"\" else np.nan for x in temp]\r\n                    outvalue.append(temp)  \r\n                    \r\n        df = pd.DataFrame(data = outvalue, columns= paraSchNames)   \r\n        for nameCol, nameUnit in zip(df.columns, unit_header):\r\n            self.__class__.dictUnitValue[nameCol] = nameUnit\r\n        # remove blank line\r\n        df = df.drop(0, axis = 0)    \r\n        return df            \r\n\r\n        \r\n    @property    \r\n    def UnwrapDFrame(self):\r\n        \"\"\"\r\n        return the unwrap Panda DataFrame\r\n        \"\"\"\r\n        return self._df\r\n\r\n    def Append(self, *args, **kwargs):\r\n        \"\"\"\r\n        method to call the 'append' DataFrame method to concat 2 DataFrames\r\n        \"\"\"\r\n        if isinstance(args[0], WrapDFrame):\r\n            # uwrap fist item\r\n            args = list(args)\r\n            args[0] = args[0].UnwrapDFrame\r\n            args = tuple(args)\r\n        new_df = self.UnwrapDFrame.append(args, kwargs)\r\n        return WrapDFrame(new_df)\r\n        \r\n        \r\n    def ToHTML(self):\r\n        \"\"\"\r\n        convert DataFrame to Html and open it \r\n        \"\"\"\r\n        filename = my_path + '\\\\htmlDataFrame.html'\r\n        htmlDf = \"\"\"\\\r\n        <html>\r\n        <head>\r\n        <style> \r\n          table, th, td {{font-size:10pt; border:1px solid black; border-collapse:collapse; text-align:left;}}\r\n          th, td {{padding: 5px;}}\r\n          tr:nth-child(even) {{background: #E0E0E0;}}\r\n          tr:hover {{background: silver; cursor: pointer;}}\r\n        </style>\r\n        </head>\r\n          <body>\r\n            {0}\r\n          </body>\r\n        </html>\r\n        \"\"\".format(self.UnwrapDFrame.to_html())   \r\n        #\r\n        # add unit in tooltip with bs4\r\n        soup = bs(htmlDf, 'html.parser')\r\n        tables = soup.find_all('table')\r\n        for table in tables:\r\n            rows = table.find_all('tr')\r\n            row = rows[0]\r\n            cols = row.find_all('th')\r\n            for ele in cols:\r\n                if ele.string is not None:\r\n                    unit = self.__class__.dictUnitValue.get(ele.string.strip())\r\n                    if unit is not None:\r\n                        print(\"pass\")\r\n                        try:\r\n                           ele[\"title\"] = unit\r\n                        except:\r\n                            import traceback\r\n                            self.lstError.append([ele.string, traceback.format_exc()])\r\n        htmlDf = soup.prettify()\r\n        #\r\n        #with open(filename, 'w') as f:\r\n        with codecs.open(filename, \"w\", encoding=\"utf-8\") as f:\r\n            f.write( htmlDf)\r\n        webbrowser.open_new_tab(filename)            \r\n     \r\n    def __to_Float(self, x):\r\n        \"\"\"\r\n        convert value cell to float and get suffix unit\r\n        \"\"\"\r\n        sgA = re.match(r'([+-]?\\d*.?\\d+)\\s(.+)', x)\r\n        sgB = re.match(r'([+-]?\\d*.?\\d+)', x)\r\n        if sgA is not None:\r\n            return float(sgA.group(1).replace(',','.')), sgA.group(2)\r\n        elif sgB is not None:\r\n            return float(sgB.group(1).replace(',','.')), \"\"\r\n        else:\r\n            return x, \"\"\r\n\r\nOUT = WrapDFrame",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "2515ed767854487ca38f3b18bb72059e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c1763da808344e6e875e60ba9b03eaac",
          "Name": "OUT",
          "Description": "Résultat du script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Exécute un script Python intégré."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "3c66003ddfcb493ba8b115d621b767de",
      "Inputs": [
        {
          "Id": "d75b15f6dd804494a67127d749c4e802",
          "Name": "",
          "Description": "Afficher la sortie de ce noeud",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3b027f3a08434984aa055584eefac311",
          "Name": "",
          "Description": "Sortie du noeud",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualiser la sortie du noeud"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "f8ebcf3e206249aca01322eaa1033ecb",
      "Inputs": [
        {
          "Id": "bc2c111d5bee4e5b824b5260114f114d",
          "Name": "",
          "Description": "Afficher la sortie de ce noeud",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4dcc1b3f08054d9d8536f35941302aec",
          "Name": "",
          "Description": "Sortie du noeud",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualiser la sortie du noeud"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "b485163dfe094c488e69eeec3bafc3db",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "eeaa4160c2ed42b8929b5c27b9a302f9",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Sélection entre True et False."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "c82b12cfd0a641e0946430fbeadddb58",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b385d4be13df4beabd6f7f99bfdcb5fd",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Sélection entre True et False."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "81fed989784b4170a8a639879f971ade",
      "Inputs": [
        {
          "Id": "90f11a5a2e1d4b6fac2502a586c1231d",
          "Name": "",
          "Description": "Afficher la sortie de ce noeud",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4a04219cf496488bb8cba23a8f03f5bb",
          "Name": "",
          "Description": "Sortie du noeud",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualiser la sortie du noeud"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nimport sys\r\nimport re\r\nimport System\r\nreDir = System.IO.DirectoryInfo(re.__file__)\r\npath_py3_lib = reDir.Parent.Parent.FullName\r\nsys.path.append(path_py3_lib + r'\\Lib\\site-packages')\r\n# pip install mysqlclient\r\n# pip install pymysql\r\n# pip install sqlalchemy\r\n# pip install mysql-connector-python\r\nimport sqlalchemy as db\r\nimport mysql\r\nimport pandas as pd\r\nimport numpy as np\r\n\r\nWrapDFrame = IN[0] # import class          \r\n\r\nexecute = IN[1]\r\nif execute: \r\n    #\r\n    # Set database credentials.\r\n    creds = {'usr': 'root',\r\n             'pwd': '',\r\n             'hst': 'localhost',\r\n             'prt': 3306,\r\n             'dbn': 'powerbalance'}\r\n    # MySQL conection string.\r\n    connstr = 'mysql+mysqlconnector://{usr}:{pwd}@{hst}:{prt}/{dbn}'\r\n    # Create sqlalchemy engine for MySQL connection.\r\n    engine = db.create_engine(connstr.format(**creds))\r\n\r\n    # export to sql\r\n    table_name = 'datasql'\r\n    df = pd.read_sql(\"SELECT * FROM %s\" % table_name, engine)\r\n    objdfD = WrapDFrame(df)\r\n    # view in Html\r\n    objdfD.ToHTML()\r\n    OUT = objdfD\r\n",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "759cd8abd70e4a44b4b7a2b1303c4418",
      "Inputs": [
        {
          "Id": "c1fb4339e79e42a4a08432b14b23e44d",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d9c168eed33c4dde87dcff6c23a5696c",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a48a0d01795d45dbb0aa23a192ef1324",
          "Name": "OUT",
          "Description": "Résultat du script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Exécute un script Python intégré."
    }
  ],
  "Connectors": [
    {
      "Start": "d8c2f6b48adb421c9f1ff99a47912e90",
      "End": "d75b15f6dd804494a67127d749c4e802",
      "Id": "7c8e4100040e40e6ab51ffe9dc1f5646"
    },
    {
      "Start": "565da20fe2d54687a5a234ff9c504925",
      "End": "84761a7e15724a82b9f0a43b3ff42fb4",
      "Id": "dacd1eef65334738ba56abe44a9cad7c"
    },
    {
      "Start": "c1763da808344e6e875e60ba9b03eaac",
      "End": "bc2c111d5bee4e5b824b5260114f114d",
      "Id": "ed73f5e9dcf0477f8e1b9fd2c44bd6f6"
    },
    {
      "Start": "4dcc1b3f08054d9d8536f35941302aec",
      "End": "47975528a696432bbc69c5d4536c840f",
      "Id": "82323c53d05f4347b02db1d38c615618"
    },
    {
      "Start": "4dcc1b3f08054d9d8536f35941302aec",
      "End": "c1fb4339e79e42a4a08432b14b23e44d",
      "Id": "bc2b1a71c59144b091aa50d70acfa93f"
    },
    {
      "Start": "eeaa4160c2ed42b8929b5c27b9a302f9",
      "End": "d42c7ee137f44648b9153768eb9e48cc",
      "Id": "88e9480268484bcf874a35596e5489df"
    },
    {
      "Start": "b385d4be13df4beabd6f7f99bfdcb5fd",
      "End": "d9c168eed33c4dde87dcff6c23a5696c",
      "Id": "fc21f19d277a434bbc4bd1c3794810af"
    },
    {
      "Start": "a48a0d01795d45dbb0aa23a192ef1324",
      "End": "90f11a5a2e1d4b6fac2502a586c1231d",
      "Id": "6f075a60a1284ed1919eead9aa2286cd"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.12",
      "Data": {}
    }
  ],
  "Author": "",
  "Linting": {
    "activeLinter": "Aucun",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.12.0.5650",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Aperçu en arrière-plan",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "10e706ab572f4433a47a4518e6392d81",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 123.59152146222516,
        "Y": 703.82670624413981
      },
      {
        "ShowGeometry": true,
        "Name": "Views",
        "Id": "18c64afe6c784dbd93b52836ea555d37",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -377.23845199391519,
        "Y": 728.12892383203609
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "2515ed767854487ca38f3b18bb72059e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -851.346559732785,
        "Y": 280.91767345755363
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "3c66003ddfcb493ba8b115d621b767de",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 376.89098222317557,
        "Y": 707.23594482775763
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "f8ebcf3e206249aca01322eaa1033ecb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -695.41871189253879,
        "Y": 280.02852325384197
      },
      {
        "ShowGeometry": true,
        "Name": "Excecute Script?",
        "Id": "b485163dfe094c488e69eeec3bafc3db",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -113.03073348416274,
        "Y": 848.0886096815268
      },
      {
        "ShowGeometry": true,
        "Name": "Excecute Script?",
        "Id": "c82b12cfd0a641e0946430fbeadddb58",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -351.557531402658,
        "Y": 1203.1698950092355
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "81fed989784b4170a8a639879f971ade",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 138.36418430468092,
        "Y": 1062.3172301554653
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "759cd8abd70e4a44b4b7a2b1303c4418",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -114.93527645627006,
        "Y": 1058.9079915718453
      }
    ],
    "Annotations": [
      {
        "Id": "ead51db70060436c96cdc7baa4a5c59b",
        "Title": "Export to SQL",
        "Nodes": [
          "10e706ab572f4433a47a4518e6392d81",
          "18c64afe6c784dbd93b52836ea555d37",
          "3c66003ddfcb493ba8b115d621b767de",
          "b485163dfe094c488e69eeec3bafc3db"
        ],
        "Left": -387.23845199391519,
        "Top": 664.82670624413981,
        "Width": 984.12943421709076,
        "Height": 320.40923858361782,
        "FontSize": 24.0,
        "InitialTop": 703.82670624413981,
        "InitialHeight": 289.261903437387,
        "TextblockHeight": 29.0,
        "Background": "#FFFF7BAC"
      },
      {
        "Id": "393140dda3314733ae709fa378b79057",
        "Title": "classe WrapDFrame",
        "Nodes": [
          "2515ed767854487ca38f3b18bb72059e",
          "f8ebcf3e206249aca01322eaa1033ecb"
        ],
        "Left": -861.346559732785,
        "Top": 234.02852325384197,
        "Width": 385.92784784024616,
        "Height": 324.0,
        "FontSize": 30.0,
        "InitialTop": 280.02852325384197,
        "InitialHeight": 145.88915020371167,
        "TextblockHeight": 36.0,
        "Background": "#FF48B9FF"
      },
      {
        "Id": "f85d945bf35d4f8796374b3d7cd5dff9",
        "Title": "read SQL and export to Html",
        "Nodes": [
          "759cd8abd70e4a44b4b7a2b1303c4418",
          "81fed989784b4170a8a639879f971ade",
          "c82b12cfd0a641e0946430fbeadddb58"
        ],
        "Left": -361.557531402658,
        "Top": 1019.9079915718453,
        "Width": 719.921715707339,
        "Height": 320.40923858362,
        "FontSize": 24.0,
        "InitialTop": 1058.9079915718453,
        "InitialHeight": 289.26190343739017,
        "TextblockHeight": 29.0,
        "Background": "#FF71C6A8"
      }
    ],
    "X": 414.76170369377405,
    "Y": 39.689257225418942,
    "Zoom": 0.34796080187898842
  }
}