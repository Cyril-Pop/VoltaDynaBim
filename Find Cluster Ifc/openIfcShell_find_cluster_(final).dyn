{
  "Uuid": "58c07a9f-6750-4d0b-8bbc-deef51448a80",
  "IsCustomNode": false,
  "Description": "",
  "Name": "openIfcShell_find_cluster_(final)",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nimport sys\r\nimport re\r\nimport System\r\nclr.AddReference('System.Drawing')\r\nimport System.Drawing\r\nfrom System.Drawing import *\r\nfrom System.Drawing.Imaging import *\r\nfrom System.IO import MemoryStream\r\n\r\nreDir = System.IO.DirectoryInfo(re.__file__)\r\npath_py3_lib = reDir.Parent.Parent.FullName\r\nsys.path.append(path_py3_lib + r'\\Lib\\site-packages')\r\nimport os\r\nimport traceback\r\nimport ifcopenshell\r\nimport ifcopenshell.geom\r\nfrom ifcopenshell.util.placement import get_local_placement\r\nimport numpy as np\r\nfrom sklearn.cluster import DBSCAN\r\nimport matplotlib.pyplot as plt\r\nfrom mpl_toolkits.mplot3d import Axes3D\r\nfrom PIL import Image\r\nimport io\r\nimport multiprocessing\r\n\r\n\r\nclass ImgUtils():\r\n    def __init__(self):\r\n        pass\r\n        \r\n    def plt2arr(self, fig):\r\n        \"\"\"\r\n        need to draw if figure is not drawn yet\r\n        \"\"\"\r\n        fig.canvas.draw()\r\n        rgba_buf = fig.canvas.buffer_rgba()\r\n        (w,h) = fig.canvas.get_width_height()\r\n        rgba_arr = np.frombuffer(rgba_buf, dtype=np.uint8).reshape((h,w,4))\r\n        return rgba_arr\r\n    \r\n    def convertToBitmap2(self, npImgArray):\r\n        \"\"\" convert numpy array img to bitmap \"\"\"\r\n        bitmap_ = None\r\n        # remove alpha\r\n        if npImgArray.ndim == 3 and npImgArray.shape[-1] == 4:\r\n            npImgArray = npImgArray[:, :, :-1]\r\n        # convert to PIL Image\r\n        if npImgArray.ndim == 3:\r\n            image = Image.fromarray(npImgArray, \"RGB\")\r\n        else:\r\n            image = Image.fromarray(npImgArray, \"L\")\r\n        # convert to Python ByteArray\r\n        byteIO = io.BytesIO()\r\n        image.save(byteIO, format='BMP')\r\n        byteArr = byteIO.getvalue()\r\n        # convert to Net ByteArray\r\n        netBytes = System.Array[System.Byte](byteArr)\r\n        with MemoryStream(netBytes) as ms:\r\n            bitmap_ = Bitmap(ms)\r\n        return bitmap_\r\n\r\n\r\nclass IfcUtils(ImgUtils):\r\n    def __init__(self, file_path, hight_precision):\r\n        super(IfcUtils, self).__init__()\r\n        self._file_path = file_path\r\n        self.ifc_file = ifcopenshell.open(self._file_path)\r\n        self._hight_precision = hight_precision\r\n        self.array_pt = []\r\n        self.clusters = []\r\n        self.yhat = None\r\n        self.model = None\r\n        \r\n        \r\n    def get_2dLocation(self, ifcproduct):\r\n        \"\"\" get 2d locatio from ifcproduct with ObjectPlacement property \"\"\"\r\n        placement_matrix = get_local_placement(ifcproduct.ObjectPlacement)\r\n        x = float(placement_matrix[0][-1])\r\n        y = float(placement_matrix[1][-1])\r\n        z = float(placement_matrix[2][-1])\r\n        return round(x, 1), round(y, 1), round(z, 1)\r\n        \r\n    def PrintData_IfcClass(self, ifc_class_lst = ['IfcSite', 'IfcBuilding']):\r\n        \"\"\" print some Ifc data class \"\"\"\r\n        for  class_str_ifc in ifc_class_lst:\r\n            products_class = self.ifc_file.by_type(class_str_ifc)\r\n            for product in products_class:\r\n                print(\"****************************\")\r\n                print(\"Type : \", product.is_a())\r\n                print('GlobalId :', product.GlobalId)\r\n                print('Description :', product.Description)\r\n                print('IsDefinedBy :', product.IsDefinedBy)\r\n                print('Representation :', product.Representation)\r\n                print('Name :', product.Name)\r\n                print('product_Infos :', product.get_info())\r\n                #\r\n                type_product = ifcopenshell.util.element.get_type(product)\r\n                if type_product is not None:\r\n                    print(('type_product :', type_product))\r\n                    print(('type_productName :', type_product.Name))\r\n                    print(('type_product_Infos :', type_product.get_info()))\r\n                #\r\n                commonAttrs = list(product.get_info().values())[2:-1]\r\n                print(('commonAttrs', commonAttrs))\r\n    \r\n    def SearchClusterPoints(self):\r\n        \"\"\" search Cluster by location \"\"\"\r\n        settings = ifcopenshell.geom.settings()\r\n        # get unit length \r\n        global_unit_assignments = self.ifc_file.by_type(\"IfcUnitAssignment\")\r\n        # The global context defines 0 or more unit sets, each containing IFC unit definitions (using list comprehension):\r\n        global_length_unit_definition = [u for ua in global_unit_assignments for u in ua.Units if u.is_a() in ('IfcSIUnit', 'IfcConversionBasedUnit') and u.UnitType=='LENGTHUNIT'][-1]\r\n        # set esp value for DBSCAN\r\n        esp_value = 40000.0 if global_length_unit_definition[2] == 'MILLI' else 40.0\r\n        if self._hight_precision:\r\n            esp_value = esp_value * 0.5\r\n        #\r\n        products = self.ifc_file.by_type('IfcProduct')\r\n        out_location = []\r\n        #\r\n        ### Start Processing ####\r\n        if self._hight_precision:\r\n            iterator = ifcopenshell.geom.iterator(settings, self.ifc_file, multiprocessing.cpu_count())\r\n            if iterator.initialize():\r\n                while True:\r\n                    shape = iterator.get()\r\n                    element = self.ifc_file.by_guid(shape.guid)\r\n                    out_location.append(self.get_2dLocation(element))\r\n                    faces = shape.geometry.faces # Indices of vertices per triangle face e.g. [f1v1, f1v2, f1v3, f2v1, f2v2, f2v3, ...]\r\n                    verts = shape.geometry.verts # X Y Z of vertices in flattened list e.g. [v1x, v1y, v1z, v2x, v2y, v2z, ...]\r\n                    materials = shape.geometry.materials # Material names and colour style information that are relevant to this shape\r\n                    material_ids = shape.geometry.material_ids # Indices of material applied per triangle face e.g. [f1m, f2m, ...]\r\n                    # Since the lists are flattened, you may prefer to group them per face like so depending on your geometry kernel\r\n                    grouped_verts = [[verts[i], verts[i + 1], verts[i + 2]] for i in range(0, len(verts), 3)]\r\n                    for x, y, z in grouped_verts:\r\n                        out_location.append([round(x, 1), round(y, 1), round(z, 1)])\r\n                    grouped_faces = [[faces[i], faces[i + 1], faces[i + 2]] for i in range(0, len(faces), 3)]\r\n                    if not iterator.next():\r\n                        break\r\n        else:\r\n            for product in products:\r\n                out_location.append(self.get_2dLocation(product))\r\n                \r\n        self.array_pt = np.array(out_location)\r\n        # remove the duplicates point\r\n        self.array_pt = np.unique(self.array_pt, axis=0)\r\n        # define the model\r\n        self.model = DBSCAN(eps = esp_value, min_samples = 1)\r\n        # fit model and predict clusters\r\n        self.yhat = self.model.fit_predict(self.array_pt)\r\n        # retrieve unique clusters\r\n        self.clusters = np.unique(self.yhat)\r\n        \r\n    def Show(self, show3d = False, angle=200):\r\n        fig = plt.figure()\r\n        if not show3d:\r\n            fig.suptitle(\"number of cluster found: {}\".format(len(set(self.model.labels_))))\r\n            for cluster in self.clusters:\r\n                # get row indexes for samples with this cluster\r\n                row_ix = np.where(self.yhat == cluster)\r\n                # create scatter of these samples\r\n                plt.scatter(self.array_pt[row_ix, 0], self.array_pt[row_ix, 1])\r\n        else:\r\n            #ax = Axes3D(fig)\r\n            ax = fig.add_subplot(projection='3d')\r\n            ax.scatter(self.array_pt[:,0], self.array_pt[:,1], self.array_pt[:,2], c = self.model.labels_, s=70, cmap='brg' )\r\n            ax.view_init(azim=angle)\r\n            ax.set_title(\"number of cluster found: {}\".format(len(set(self.model.labels_))))\r\n        image_from_plot = self.plt2arr(fig)\r\n        bitmap1 = self.convertToBitmap2(image_from_plot)\r\n        return bitmap1\r\n\r\n\r\nfile_path = IN[0]\r\nhight_precision = IN[1] # boolean\r\n#\r\nobjIfc = IfcUtils(file_path, hight_precision)\r\nobjIfc.SearchClusterPoints()\r\n\r\nOUT = objIfc\r\n",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "026d14521d90472ea6342ad05b2218ee",
      "Inputs": [
        {
          "Id": "2b402b9bd81042fe9929448b8f1a5149",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "dcddc0b10d864ba7af371774bd878d56",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3183c8bfc33b415fac9c959f4b38a9dc",
          "Name": "OUT",
          "Description": "Résultat du script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Exécute un script Python intégré."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "f21bf03368ee4ac8aecfde0a44397889",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "5906350295604d5586ec4418acad628a",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Sélection entre True et False."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Filename, CoreNodeModels",
      "HintPath": "D:\\REVIT\\Scripts Dynamo\\DEV_01 Recherche et Developpement R&D\\Test IFC OpenShell\\RAC_basic_sample_project_test_scatter (meter).ifc",
      "InputValue": "D:\\REVIT\\Scripts Dynamo\\DEV_01 Recherche et Developpement R&D\\Test IFC OpenShell\\RAC_basic_sample_project_test_scatter (meter).ifc",
      "NodeType": "ExtensionNode",
      "Id": "eee7cafc2faf492db5b34ecda15b0e8a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "14dcf1758ba5410a992c91f77e94a205",
          "Name": "",
          "Description": "Chemin de fichier",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Permet de sélectionner un fichier dans le système pour obtenir son chemin."
    },
    {
      "ConcreteType": "CoreNodeModels.WatchImageCore, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "22593c200af64504af013e39a6fd8fe0",
      "Inputs": [
        {
          "Id": "df1535031cce432db3c8d1fed54fa92d",
          "Name": "image",
          "Description": "Image pour visualisation",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5b204a6303834e8a8de8de3c16a3e9e8",
          "Name": "image",
          "Description": "Image pour visualisation",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Affiche l'aperçu d'une image"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nimport sys\r\nimport re\r\nimport System\r\nclr.AddReference('System.Drawing')\r\nimport System.Drawing\r\nfrom System.Drawing import *\r\nfrom System.Drawing.Imaging import *\r\nfrom System.IO import MemoryStream\r\n\r\nreDir = System.IO.DirectoryInfo(re.__file__)\r\npath_py3_lib = reDir.Parent.Parent.FullName\r\nsys.path.append(path_py3_lib + r'\\Lib\\site-packages')\r\nimport os\r\n\r\nobjIfc = IN[0]\r\nviewThreeD = IN[1]\r\nangle = IN[2]\r\n\r\n#objIfc.PrintData_IfcClass()\r\n\r\nOUT = objIfc.Show(show3d = viewThreeD, angle=angle)",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "b071a8274d7e46508720ab86c20b3102",
      "Inputs": [
        {
          "Id": "d8029f72bc1f4bf2b3e304abbf920d87",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "826a77b4e9e84cadb0254df5319050d6",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1dc43c9cb1b542db8cbe3a6bd71f26d0",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e3b7e0c67ae04a948ce5643037971b82",
          "Name": "OUT",
          "Description": "Résultat du script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Exécute un script Python intégré."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 200.0,
      "MinimumValue": 0.0,
      "StepValue": 1.0,
      "InputValue": 121.0,
      "Id": "4a838389d22e4313a883188e20518974",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "02b423b74e4a4ab29faeb8e3a276d7c8",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Curseur qui génère des valeurs numériques."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "531e836944fd448eb2614775cc1cee3f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f624918d0bbb4f0cbc971ff1de7921ad",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Sélection entre True et False."
    }
  ],
  "Connectors": [
    {
      "Start": "3183c8bfc33b415fac9c959f4b38a9dc",
      "End": "d8029f72bc1f4bf2b3e304abbf920d87",
      "Id": "59318a1ea8d04e0293d15cd85afefab7",
      "IsHidden": "False"
    },
    {
      "Start": "5906350295604d5586ec4418acad628a",
      "End": "dcddc0b10d864ba7af371774bd878d56",
      "Id": "dcc4dc20ed8d46a5bf68b244a266240b",
      "IsHidden": "False"
    },
    {
      "Start": "14dcf1758ba5410a992c91f77e94a205",
      "End": "2b402b9bd81042fe9929448b8f1a5149",
      "Id": "b04fc9a4b7d544d4bde5a8b231d7c590",
      "IsHidden": "False"
    },
    {
      "Start": "e3b7e0c67ae04a948ce5643037971b82",
      "End": "df1535031cce432db3c8d1fed54fa92d",
      "Id": "43941c486d9249a5829fb5734adb36f7",
      "IsHidden": "False"
    },
    {
      "Start": "02b423b74e4a4ab29faeb8e3a276d7c8",
      "End": "1dc43c9cb1b542db8cbe3a6bd71f26d0",
      "Id": "21ee3540b54f49debf69424d15b353e7",
      "IsHidden": "False"
    },
    {
      "Start": "f624918d0bbb4f0cbc971ff1de7921ad",
      "End": "826a77b4e9e84cadb0254df5319050d6",
      "Id": "0b710d50ca2544408046a2d6778d0a71",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [
    {
      "Name": "RAC_basic_sample_project_test_scatter (meter).ifc",
      "ReferenceType": "External",
      "Nodes": [
        "eee7cafc2faf492db5b34ecda15b0e8a"
      ]
    }
  ],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Propriétés",
      "Version": "2.15",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "2.0",
      "Data": {}
    }
  ],
  "Author": "",
  "Linting": {
    "activeLinter": "Aucun",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.13.1.3887",
      "RunType": "Automatic",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Aperçu en arrière-plan",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "026d14521d90472ea6342ad05b2218ee",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 369.94240652074024,
        "Y": 212.33013369559669
      },
      {
        "Name": "hight precision",
        "ShowGeometry": true,
        "Id": "f21bf03368ee4ac8aecfde0a44397889",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 64.718599412714354,
        "Y": 314.38407899645074
      },
      {
        "Name": "File Path",
        "ShowGeometry": true,
        "Id": "eee7cafc2faf492db5b34ecda15b0e8a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -631.19054386772041,
        "Y": 159.68508567002687
      },
      {
        "Name": "Watch Image",
        "ShowGeometry": true,
        "Id": "22593c200af64504af013e39a6fd8fe0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1019.7528099976087,
        "Y": 197.89082942956779
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "b071a8274d7e46508720ab86c20b3102",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 730.76492857344431,
        "Y": 200.86220061477329
      },
      {
        "Name": "angle View 3D",
        "ShowGeometry": true,
        "Id": "4a838389d22e4313a883188e20518974",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 146.5153114839058,
        "Y": 607.86286118319049
      },
      {
        "Name": "show 3D?",
        "ShowGeometry": true,
        "Id": "531e836944fd448eb2614775cc1cee3f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 218.92067673815478,
        "Y": 463.9932424271351
      }
    ],
    "Annotations": [
      {
        "Id": "d5e33726c3b84a479b2ae494628fde95",
        "Title": "data processing",
        "DescriptionText": "<Double-cliquer ici pour modifier la description du groupe>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "026d14521d90472ea6342ad05b2218ee"
        ],
        "HasNestedGroups": false,
        "Left": 359.94240652074024,
        "Top": 73.330133695596686,
        "Width": 193.99999999999994,
        "Height": 301.0,
        "FontSize": 36.0,
        "InitialTop": 212.33013369559669,
        "InitialHeight": 145.00000000000003,
        "TextblockHeight": 129.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "e2fbd168ba794ccdbe4fd04decfaea1d",
        "Title": "viewer",
        "DescriptionText": "<Double-cliquer ici pour modifier la description du groupe>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "b071a8274d7e46508720ab86c20b3102"
        ],
        "HasNestedGroups": false,
        "Left": 720.76492857344431,
        "Top": 104.86220061477329,
        "Width": 194.0,
        "Height": 293.0,
        "FontSize": 36.0,
        "InitialTop": 200.86220061477329,
        "InitialHeight": 145.0,
        "TextblockHeight": 86.0,
        "Background": "#FFC1D676"
      }
    ],
    "X": 340.17921915044485,
    "Y": -13.794324912561308,
    "Zoom": 0.90002773577644712
  }
}